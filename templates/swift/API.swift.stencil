// MARK: - {{ api.name }}

#if {{ unifiedMacroFlag }}

struct {{ api.name }}: API {
    let client: ApolloClient

    typealias Query = {{ api.name }}
    typealias Path<V> = GraphQLPath<{{ api.name }}, V>
    typealias FragmentPath<V> = GraphQLFragmentPath<{{ api.name }}, V>

    {% if api.mutation %}
    enum Mutation: MutationTarget {
        typealias Path<V> = GraphQLPath<{{ api.name }}.Mutation, V>
        typealias FragmentPath<V> = GraphQLFragmentPath<{{ api.name }}.Mutation, V>

        {{ api.mutation.fields|code:"static" }}
    }
    {% endif %}

    {{ api.query.fields|code:"static" }}
    {{ api.types|code }}
}

extension {{ api.name }} {

    init(url: URL{% if api.url %} = URL(string: "{{ api.url }}")!{% endif %},
         client: URLSessionClient = URLSessionClient(),
         useGETForQueries: Bool = false,
         enableAutoPersistedQueries: Bool = false,
         useGETForPersistedQueryRetry: Bool = false,
         requestBodyCreator: RequestBodyCreator = ApolloRequestBodyCreator(),
         store: ApolloStore = ApolloStore(cache: InMemoryNormalizedCache())) {

		let provider = LegacyInterceptorProvider(client: client, store: store)
		let networkTransport = RequestChainNetworkTransport(interceptorProvider: provider,
															endpointURL: url,
															autoPersistQueries: enableAutoPersistedQueries,
															requestBodyCreator: requestBodyCreator,
															useGETForQueries: useGETForQueries,
															useGETForPersistedQueryRetry: useGETForPersistedQueryRetry)
        self.init(client: ApolloClient(networkTransport: networkTransport, store: store))
    }

}

{% for type in api.types %}
extension GraphQLFragmentPath where UnderlyingType == {{ api.name }}.{{ type.name|upperCamelized }} {
    {{ type.fields|code }}

    {% for interface in type.interfaces %}
    var {{ interface.name|camelized|keywordProtected }}: FragmentPath<{{ api.name }}.{{ interface.name|upperCamelized }}> { .init() }
    {% endfor %}

    {% for possibleType in type.possibleTypes %}
    var {{ possibleType.name|camelized|keywordProtected }}: FragmentPath<{{ api.name }}.{{ possibleType.name|upperCamelized }}?> { .init() }
    {% endfor %}
}

extension GraphQLFragmentPath where UnderlyingType == {{ api.name }}.{{ type.name|upperCamelized }}? {
    {{ type.fields|code:"optional" }}

    {% for interface in type.interfaces %}
    var {{ interface.name|camelized|keywordProtected }}: FragmentPath<{{ api.name }}.{{ interface.name|upperCamelized }}?> { .init() }
    {% endfor %}

    {% for possibleType in type.possibleTypes %}
    var {{ possibleType.name|camelized|keywordProtected }}: FragmentPath<{{ api.name }}.{{ possibleType.name|upperCamelized }}?> { .init() }
    {% endfor %}
}
{% endfor %}

#endif
